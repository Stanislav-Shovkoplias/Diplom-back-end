digraph "devx" {

splines  = ortho;
fontname = "Inconsolata";

node [colorscheme = ylgnbu4];
edge [colorscheme = dark28, dir = both];

Auction                [shape = record, label = "{ Auction | + Auction() : \l + Auction(Long, String, String, String, String, String, LocalDateTime, LocalDateTime, Integer, Fund, Double, Long, List\<Bid\>, List\<Message\>) : \l|- name : String\l - startValue : Long\l - description : String\l - expireTime : LocalDateTime\l - startTime : LocalDateTime\l - fund : Fund\l - bidList : List\<Bid\>\l - photo : String\l - messages : List\<Message\>\l - contact : String\l - fundStake : Double\l - authorName : String\l - status : Integer\l - id : Long\l|+ getName() : String\l + getId() : Long\l + getDescription() : String\l + setPhoto(String) : void\l + setStatus(Integer) : void\l # canEqual(Object) : boolean\l + setStartValue(Long) : void\l + getPhoto() : String\l + getStartValue() : Long\l + setExpireTime(LocalDateTime) : void\l + hashCode() : int\l + getMessages() : List\<Message\>\l + setFundStake(Double) : void\l + getFundStake() : Double\l + setFund(Fund) : void\l + equals(Object) : boolean\l + setId(Long) : void\l + getAuthorName() : String\l + builder() : AuctionBuilder\l + setAuthorName(String) : void\l + getStatus() : Integer\l + getContact() : String\l + getBidList() : List\<Bid\>\l + setMessages(List\<Message\>) : void\l + setContact(String) : void\l + setBidList(List\<Bid\>) : void\l + getFund() : Fund\l + setName(String) : void\l + getExpireTime() : LocalDateTime\l + setDescription(String) : void\l + getStartTime() : LocalDateTime\l + toString() : String\l + setStartTime(LocalDateTime) : void\l }"];
AuctionRepository      [shape = record, label = "{ \<\<interface\>\>\nAuctionRepository | + findAll(String, Integer, Pageable) : List\<Auction\>\l }"];
AuctionSaveDto         [shape = record, label = "{ AuctionSaveDto | + AuctionSaveDto() : \l + AuctionSaveDto(String, String, String, String, Integer, Long, Double, Long) : \l|- fund : Long\l - name : String\l - contact : String\l - fundPercentage : Double\l - price : Long\l - expirationTime : Integer\l - authorName : String\l - description : String\l|+ equals(Object) : boolean\l + toString() : String\l + getName() : String\l + setDescription(String) : void\l + getDescription() : String\l + setName(String) : void\l + setFund(Long) : void\l + setFundPercentage(Double) : void\l + setExpirationTime(Integer) : void\l + getAuthorName() : String\l + getContact() : String\l + getExpirationTime() : Integer\l + getFund() : Long\l + getFundPercentage() : Double\l + getPrice() : Long\l + setAuthorName(String) : void\l + setContact(String) : void\l # canEqual(Object) : boolean\l + hashCode() : int\l + setPrice(Long) : void\l }"];
AuctionService         [shape = record, label = "{ AuctionService | + AuctionService(AuctionRepository, FundService, ImageService, SimpMessagingTemplate, BidRepository) : \l|- fundService : FundService\l - simpMessagingTemplate : SimpMessagingTemplate\l - imageService : ImageService\l - bidService : BidRepository\l - auctionRepository : AuctionRepository\l|+ findAll() : List\<Auction\>\l + findById(Long) : Optional\<Auction\>\l + findAll(String, Integer, Integer, String) : List\<Auction\>\l + save(AuctionSaveDto, MultipartFile) : Auction\l - delay(Auction) : void\l }"];
Bid                    [shape = record, label = "{ Bid | + Bid(Long, String, Double, Auction) : \l + Bid() : \l|- amount : Double\l - id : Long\l - bidderName : String\l - auction : Auction\l|+ getId() : Long\l + getBidderName() : String\l + getAmount() : Double\l + getAuction() : Auction\l + setId(Long) : void\l + setBidderName(String) : void\l + hashCode() : int\l + toString() : String\l + setAmount(Double) : void\l + setAuction(Auction) : void\l # canEqual(Object) : boolean\l + builder() : BidBuilder\l + equals(Object) : boolean\l }"];
BidRepository          [shape = record, label = "{ \<\<interface\>\>\nBidRepository | + findAll(Long, Sort) : List\<Bid\>\l + findCurrent(Long) : Optional\<Bid\>\l }"];
BidSaveDto             [shape = record, label = "{ BidSaveDto | + BidSaveDto(String, Double) : \l + BidSaveDto() : \l|- name : String\l - value : Double\l|+ getName() : String\l + getValue() : Double\l + setName(String) : void\l + setValue(Double) : void\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l }"];
BidSendDto             [shape = record, label = "{ BidSendDto | + BidSendDto(String, Double, Integer) : \l + BidSendDto() : \l|- name : String\l - value : Double\l - status : Integer\l|+ setValue(Double) : void\l + getName() : String\l + getValue() : Double\l + toString() : String\l + getStatus() : Integer\l + setName(String) : void\l + setStatus(Integer) : void\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l }"];
BidService             [shape = record, label = "{ BidService | + BidService(BidRepository, AuctionService) : \l|- bidRepository : BidRepository\l - auctionService : AuctionService\l|+ saveBid(BidSaveDto, Long) : Bid\l + findAll(Long) : List\<Bid\>\l + findCurrent(Long) : Optional\<Bid\>\l }"];
BucketConfig           [shape = record, label = "{ BucketConfig | + BucketConfig() : \l|- secretAccessKey : String\l - region : String\l - accessKey : String\l|+ credentials() : AWSCredentials\l + getClient() : AmazonS3\l }"];
DevxApplication        [shape = record, label = "{ DevxApplication | + DevxApplication() : \l|+ main(String[]) : void\l }"];
Fund                   [shape = record, label = "{ Fund | + Fund(Long, String, Double) : \l + Fund() : \l|- id : Long\l - name : String\l - value : Double\l|+ getValue() : Double\l + getId() : Long\l + getName() : String\l + builder() : FundBuilder\l + setId(Long) : void\l + setName(String) : void\l + setValue(Double) : void\l + toString() : String\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l }"];
FundRepository         [shape = record, label = "{ \<\<interface\>\>\nFundRepository |  }"];
FundService            [shape = record, label = "{ FundService | + FundService(FundRepository) : \l|- fundRepository : FundRepository\l|+ findById(Long) : Optional\<Fund\>\l + save(Fund) : Fund\l + findAll() : List\<Fund\>\l }"];
ImageService           [shape = record, label = "{ ImageService | + ImageService(AmazonS3) : \l|- s3 : AmazonS3\l|+ saveImage(MultipartFile) : String\l }"];
JwtRequestFilter       [shape = record, label = "{ JwtRequestFilter | + JwtRequestFilter(JwtTokenUtils) : \l|- log : Logger\l - jwtTokenUtils : JwtTokenUtils\l|# doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain) : void\l }"];
JwtTokenUtils          [shape = record, label = "{ JwtTokenUtils | + JwtTokenUtils() : \l|- secret : String\l - jwtLifetime : Duration\l|+ getRoles(String) : List\<String\>\l - getAllClaimsFromToken(String) : Claims\l + getUsername(String) : String\l + generateToken(UserDetails) : String\l }"];
LoginController        [shape = record, label = "{ LoginController | + LoginController(AuthenticationManager, UserService, JwtTokenUtils) : \l|- tokenUtils : JwtTokenUtils\l - authenticationManager : AuthenticationManager\l - service : UserService\l|+ login(LoginRequest) : String\l }"];
LoginRequest           [shape = record, label = "{ LoginRequest | + LoginRequest(String, String) : \l + LoginRequest() : \l|- username : String\l - password : String\l|+ getUsername() : String\l + getPassword() : String\l + setUsername(String) : void\l + setPassword(String) : void\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l }"];
MainController         [shape = record, label = "{ MainController | + MainController(AuctionService, FundService, MessageService, BidService) : \l|- bidService : BidService\l - fundService : FundService\l - auctionService : AuctionService\l - messageService : MessageService\l|+ getCurrentBid(Long) : Bid\l + findAll(Long) : List\<Bid\>\l + getAllMessages(Long) : List\<Message\>\l + getAllAuctions(String, Integer, Integer, String) : List\<Auction\>\l + findAuction(Long) : ResponseEntity\<Auction\>\l + saveAuction(AuctionSaveDto, HttpServletRequest, MultipartFile) : ResponseEntity\<Auction\>\l + getAllFunds() : List\<Fund\>\l }"];
MainHandler            [shape = record, label = "{ MainHandler | + MainHandler(MessageService, BidService, AuctionService) : \l|- messageService : MessageService\l - bidService : BidService\l - auctionService : AuctionService\l|+ bidHandler(BidSaveDto, Long) : BidSendDto\l + messageHandler(MessageSaveDto, Long) : Message\l }"];
Message                [shape = record, label = "{ Message | + Message(Long, String, String, String, Auction) : \l + Message() : \l|- sender : String\l - id : Long\l - color : String\l - auction : Auction\l - message : String\l|+ getSender() : String\l + hashCode() : int\l + getId() : Long\l + equals(Object) : boolean\l + getMessage() : String\l + getColor() : String\l + getAuction() : Auction\l + setId(Long) : void\l + setMessage(String) : void\l + setSender(String) : void\l + setColor(String) : void\l + builder() : MessageBuilder\l + toString() : String\l + setAuction(Auction) : void\l # canEqual(Object) : boolean\l }"];
MessageRepository      [shape = record, label = "{ \<\<interface\>\>\nMessageRepository | + findAll(Long) : List\<Message\>\l }"];
MessageSaveDto         [shape = record, label = "{ MessageSaveDto | + MessageSaveDto() : \l + MessageSaveDto(String, String, String) : \l|- sender : String\l - color : String\l - message : String\l|+ getSender() : String\l + getMessage() : String\l + getColor() : String\l + setSender(String) : void\l + setMessage(String) : void\l + setColor(String) : void\l + equals(Object) : boolean\l + toString() : String\l # canEqual(Object) : boolean\l + hashCode() : int\l }"];
MessageService         [shape = record, label = "{ MessageService | + MessageService(MessageRepository, AuctionService) : \l|- messageRepository : MessageRepository\l - auctionService : AuctionService\l|+ findAll(Long) : List\<Message\>\l + save(MessageSaveDto, Long) : Message\l }"];
PasswordEncoderConfig  [shape = record, label = "{ PasswordEncoderConfig | + PasswordEncoderConfig() : \l|+ passwordEncoder() : PasswordEncoder\l }"];
RegistrationController [shape = record, label = "{ RegistrationController | + RegistrationController(UserService, JwtTokenUtils) : \l|- usersService : UserService\l - tokenUtils : JwtTokenUtils\l|+ regPost(RegistrationDto) : String\l }"];
RegistrationDto        [shape = record, label = "{ RegistrationDto | + RegistrationDto(String, String, String) : \l + RegistrationDto() : \l|- password : String\l - username : String\l - email : String\l|+ getEmail() : String\l + getUsername() : String\l + getPassword() : String\l + setUsername(String) : void\l + setEmail(String) : void\l + setPassword(String) : void\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + toString() : String\l + hashCode() : int\l }"];
Role                   [shape = record, label = "{ \<\<enumeration\>\>\nRole | + Role() : \l|+ USER : \l + ADMIN : \l|+ getAuthority() : String\l + valueOf(String) : Role\l + values() : Role[]\l }"];
SecurityConfig         [shape = record, label = "{ SecurityConfig | + SecurityConfig(UserService, PasswordEncoder, JwtRequestFilter) : \l|- passwordEncoder : PasswordEncoder\l - requestFilter : JwtRequestFilter\l - usersService : UserService\l|+ securityFilterChain(HttpSecurity) : SecurityFilterChain\l + authenticationManager(AuthenticationConfiguration) : AuthenticationManager\l }"];
User                   [shape = record, label = "{ User | + User(Long, String, String, String, String, Role) : \l + User() : \l|- email : String\l - role : Role\l - id : Long\l - username : String\l - password : String\l - image : String\l|+ getUsername() : String\l + getId() : Long\l + toString() : String\l + getEmail() : String\l + getPassword() : String\l + builder() : UserBuilder\l + hashCode() : int\l + getImage() : String\l + equals(Object) : boolean\l + getRole() : Role\l + setEmail(String) : void\l + setRole(Role) : void\l + setImage(String) : void\l + setId(Long) : void\l + setUsername(String) : void\l + setPassword(String) : void\l # canEqual(Object) : boolean\l }"];
UserRepository         [shape = record, label = "{ \<\<interface\>\>\nUserRepository | + findByUsername(String) : Optional\<User\>\l }"];
UserService            [shape = record, label = "{ UserService | + UserService(UserRepository, PasswordEncoder) : \l|- userRepo : UserRepository\l - passwordEncoder : PasswordEncoder\l|+ loadUserByUsername(String) : UserDetails\l + findByEmail(String) : Optional\<User\>\l + save(User) : User\l }"];
WebSocketConfig        [shape = record, label = "{ WebSocketConfig | + WebSocketConfig() : \l|+ registerStompEndpoints(StompEndpointRegistry) : void\l + configureMessageBroker(MessageBrokerRegistry) : void\l }"];

Auction                -> Bid                    [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "bidList\n*"];
Auction                -> Fund                   [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "fund\n1"];
Auction                -> Message                [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "messages\n*"];
AuctionService         -> Auction                [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
AuctionService         -> AuctionRepository      [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "auctionRepository\n1"];
AuctionService         -> BidRepository          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "bidService\n1"];
AuctionService         -> BidSendDto             [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
AuctionService         -> FundService            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "fundService\n1"];
AuctionService         -> ImageService           [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "imageService\n1"];
Bid                    -> Auction                [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "auction\n1"];
BidService             -> AuctionService         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "auctionService\n1"];
BidService             -> Bid                    [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
BidService             -> BidRepository          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "bidRepository\n1"];
FundService            -> FundRepository         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "fundRepository\n1"];
JwtRequestFilter       -> JwtTokenUtils          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "jwtTokenUtils\n1"];
LoginController        -> JwtTokenUtils          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "tokenUtils\n1"];
LoginController        -> UserService            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "service\n1"];
MainController         -> AuctionService         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "auctionService\n1"];
MainController         -> BidService             [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "bidService\n1"];
MainController         -> FundService            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "fundService\n1"];
MainController         -> MessageService         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "messageService\n1"];
MainHandler            -> AuctionService         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "auctionService\n1"];
MainHandler            -> BidSendDto             [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
MainHandler            -> BidService             [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "bidService\n1"];
MainHandler            -> MessageService         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "messageService\n1"];
Message                -> Auction                [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "auction\n1"];
MessageService         -> AuctionService         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "auctionService\n1"];
MessageService         -> Message                [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
MessageService         -> MessageRepository      [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "messageRepository\n1"];
RegistrationController -> JwtTokenUtils          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "tokenUtils\n1"];
RegistrationController -> User                   [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
RegistrationController -> UserService            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "usersService\n1"];
SecurityConfig         -> JwtRequestFilter       [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "requestFilter\n1"];
SecurityConfig         -> UserService            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "usersService\n1"];
User                   -> Role                   [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "role\n1"];
UserService            -> UserRepository         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userRepo\n1"];

}
